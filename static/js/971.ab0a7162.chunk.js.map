{"version":3,"file":"static/js/971.ab0a7162.chunk.js","mappings":"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","sources":["redux/contacts/selectors.js","webpack://goit-react-hw-08-phonebook/./src/components/ContactForm/ContactForm.module.css?b5b2","components/ContactForm/ContactForm.js","components/Phonebook/Phonebook.styled.js","components/Phonebook/Phonebook.js","webpack://goit-react-hw-08-phonebook/./src/components/Filter/Filter.module.css?fad1","components/Filter/Filter.js","components/ContactList/Contact/Contacts.styled.js","components/ContactList/Contact/Contact.js","utils/upFirst.js","utils/random-colors.js","components/ContactList/ContactList.styled.js","components/ContactList/ContactList.js","pages/Contacts/Contacts.styled.js","pages/Contacts/Contacts.js"],"sourcesContent":["// selectors.js - файл объявления функций-селекторов\n\nimport { createSelector } from '@reduxjs/toolkit';\n\nexport const selectContacts = state => state.contacts.items;\nexport const selectIsLoading = state => state.contacts.isLoading;\nexport const selectError = state => state.contacts.error;\nconst selectValueFilter = state => state.filter;\n\nexport const selectVisibleContacts = createSelector(\n  [selectContacts, selectValueFilter],\n  (contacts, valueFilter) => {\n    return contacts.filter(contact =>\n      contact.name.toLowerCase().includes(valueFilter.toLowerCase())\n    );\n  }\n);","// extracted by mini-css-extract-plugin\nexport default {\"formWrap\":\"ContactForm_formWrap__LBMtj\",\"inputWrap\":\"ContactForm_inputWrap__XQBhT\",\"label\":\"ContactForm_label__-cVXI\",\"input\":\"ContactForm_input__Bl93P\",\"button\":\"ContactForm_button__eSwX9\"};","import { useDispatch, useSelector } from 'react-redux';\nimport { selectContacts } from 'redux/contacts/selectors';\nimport { addContact } from 'redux/contacts/operations';\nimport { nanoid } from 'nanoid';\nimport css from './ContactForm.module.css';\n\n//import { setItems, getContacts } from 'redux/contactsSlice';\n//import { nanoid } from 'nanoid';\n\nexport default function ContactForm() {\n  const contacts = useSelector(selectContacts);\n  const dispatch = useDispatch();\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    const form = e.target;\n    const { name, number } = form;\n\n    let value = {\n      name: name.value,\n      number: number.value,\n    };\n    // console.log(value);\n\n    if (\n      contacts.some(\n        contact => contact.name.toLowerCase() === name.value.toLowerCase()\n      )\n    ) {\n      return alert(`${name.value} is already in contacts.`);\n    }\n\n    dispatch(addContact(value));\n\n    form.reset();\n  };\n\n  return (\n    <form onSubmit={handleSubmit} className={css.formWrap}>\n      <div className={css.inputWrap}>\n        <label className={css.label}>Name</label>\n        <input\n          className={css.input}\n          id={nanoid()}\n          //id={nameId}\n          type=\"text\"\n          name=\"name\"\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n          required\n      \n        />\n      </div>\n      <div className={css.inputWrap}>\n        <label className={css.label}>Number</label>\n        <input\n          className={css.input}\n          id={nanoid()}\n          //id={numberId}\n          type=\"tel\"\n          name=\"number\"\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n          required\n         \n        />\n      </div>\n      <button className={css.button} type=\"submit\">\n        Add contact\n      </button>\n    </form>\n  );\n}\n","import styled from 'styled-components';\n\nexport const Title = styled.h1`\n  margin-bottom: 20px;\n  text-align: center;\n  font-weight: 700;\n  font-size: 30px;\n`;\n\nexport const SubTitle = styled.h2`\n  margin-bottom: 20px;\n  text-align: center;\n  font-weight: 500;\n  font-size: 30px;\n`;","import ContactForm from 'components/ContactForm/ContactForm';\n\nimport { Title, SubTitle } from './Phonebook.styled';\n\nconst Phonebook = () => {\n  return (\n    <>\n      <Title>Phonebook</Title>\n      <ContactForm />\n      <SubTitle>Contacts</SubTitle>\n    </>\n  );\n};\n\nexport default Phonebook;","// extracted by mini-css-extract-plugin\nexport default {\"filterWrap\":\"Filter_filterWrap__xOHoa\",\"label\":\"Filter_label__vEd1E\",\"input\":\"Filter_input__N7T3z\"};","//import React from 'react';\n///import PropTypes from 'prop-types';\nimport css from './Filter.module.css';\nimport { useDispatch } from 'react-redux';\nimport { setFilter } from '../../redux/contacts/filtersSlice';\nimport { nanoid } from 'nanoid';\n\nconst Filter = () => {\n  const dispatch = useDispatch();\n\n  const changeFilter = e => {\n    const { value } = e.target;\n    dispatch(setFilter(value.trim()));\n    // console.log(value);\n  };\n  return (\n    <div className={css.filterWrap}>\n      <label className={css.label}>Find contact by name</label>\n      <input\n        className={css.input}\n        id={nanoid()}\n        type=\"text\"\n        name=\"filter\"\n        onChange={changeFilter}\n      ></input>\n    </div>\n  );\n};\nexport default Filter;\n/* Filter.propTypes = {\n  filter: PropTypes.string,\n  onChange: PropTypes.func.isRequired,\n}; */\n","import styled from 'styled-components';\n\nexport const ContactWrapper = styled.div`\n  display: flex;\n  align-items: center;\n  gap: 15px;\n  padding: 5px 0;\n`;\n\nexport const Text = styled.p`\n  display: flex;\n  flex-direction: column;\n  align-items: flex-start;\n  gap: 5px;\n  font-family: inherit;\n  font-size: 15px;\n  flex-grow: 1;\n  span {\n    font-size: 12px;\n  }\n`;\n\nexport const Avatar = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  width: 30px;\n  height: 30px;\n  border-radius: 50%;\n  background-color: ${props => props.color};\n`;\n\nexport const Button = styled.button`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  padding: 0;\n  margin: 0;\n  border: none;\n  background-color: transparent;\n  cursor: pointer;\n  svg {\n    color: #bdbdbd;\n  }\n  &:hover {\n    svg {\n      color: #2196f3;\n    }\n  }\n`;","import PropTypes from 'prop-types';\nimport { MdDeleteForever } from 'react-icons/md';\n\nimport { getRandomHexColor, upFirst } from 'utils/index';\n\nimport { useDispatch } from 'react-redux';\nimport { deleteContact } from 'redux/contacts/operations';\nimport {\n  ContactWrapper,\n  Text,\n  Avatar,\n  Button,\n} from 'components/ContactList/Contact/Contacts.styled';\n\nexport const Contact = ({ contact: { id, name, number } }) => {\n  const dispatch = useDispatch();\n  const handleDelete = () => {\n    dispatch(deleteContact(id));\n  };\n\n  return (\n    <ContactWrapper>\n      <Avatar color={getRandomHexColor()}>{upFirst(name)}</Avatar>\n\n      <Text>\n        {name}\n        <span>Phone: {number}</span>\n      </Text>\n\n      <Button type=\"button\" onClick={handleDelete}>\n        <MdDeleteForever size={28} />\n      </Button>\n    </ContactWrapper>\n  );\n};\n\nContact.propTypes = {\n  contact: PropTypes.exact({\n    id: PropTypes.string.isRequired,\n    name: PropTypes.string.isRequired,\n    number: PropTypes.string.isRequired,\n  }),\n};","export const upFirst = str => str.charAt(0).toUpperCase();","export const getRandomHexColor = () => {\n    return `#${Math.floor(Math.random() * 16777215).toString(16)}`;\n  };","import styled from 'styled-components';\n\n// export const ContactsList = styled.ul`\n//   display: flex;\n//   flex-direction: column;\n//   gap: 10px;\n// `;\n\nexport const ContactsList = styled.ul`\n  margin: 0;\n  padding: 0;\n  list-style: none;\n`;\n\nexport const ContactListItem = styled.li`\n  border-top: 1px solid #2f2f37;\n`;","import { useSelector } from 'react-redux';\nimport { selectVisibleContacts } from 'redux/contacts/selectors';\n\nimport { Contact } from 'components/ContactList/Contact/Contact';\nimport {\n  ContactsList,\n  ContactListItem,\n} from 'components/ContactList/ContactList.styled';\n\nconst ContactList = () => {\n  const visibleСontacts = useSelector(selectVisibleContacts);\n\n  return (\n    <ContactsList>\n      {visibleСontacts.map(contact => (\n        <ContactListItem key={contact.id}>\n          <Contact contact={contact} />\n        </ContactListItem>\n      ))}\n    </ContactsList>\n  );\n};\n\nexport default ContactList;","import styled from 'styled-components';\n\nexport const Container = styled.div`\n  width: 280px;\n  padding: 20px;\n  margin: 0 auto;\n  border: 1px solid black;\n  border-radius: 10px;\n  box-shadow: rgb(0 0 0 / 20%) 0px 2px 1px -1px,\n    rgb(0 0 0 / 14%) 0px 1px 1px 0px, rgb(0 0 0 / 12%) 0px 1px 3px 0px;\n`;","import { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { fetchContacts } from 'redux/contacts/operations';\nimport { selectError, selectIsLoading } from 'redux/contacts/selectors';\n\nimport Phonebook from 'components/Phonebook/Phonebook';\nimport Filter from 'components/Filter/Filter';\nimport ContactList from 'components/ContactList/ContactList';\n\nimport { Container } from './Contacts.styled';\n\nconst Contacts = () => {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(selectIsLoading);\n  const error = useSelector(selectError);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <Container>\n      <Phonebook />\n      <Filter />\n      {isLoading && !error && <b>Request in progress...</b>}\n      <ContactList />\n    </Container>\n  );\n};\n\nexport default Contacts;"],"names":["selectContacts","state","contacts","items","selectIsLoading","isLoading","selectError","error","selectVisibleContacts","createSelector","filter","valueFilter","contact","name","toLowerCase","includes","ContactForm","useSelector","dispatch","useDispatch","onSubmit","e","preventDefault","form","target","number","value","some","alert","addContact","reset","className","css","id","nanoid","type","pattern","title","required","Title","styled","SubTitle","onChange","setFilter","trim","ContactWrapper","Text","Avatar","props","color","Button","Contact","str","Math","floor","random","toString","charAt","toUpperCase","onClick","deleteContact","size","ContactsList","ContactListItem","visibleСontacts","map","Container","useEffect","fetchContacts"],"sourceRoot":""}